{"version":3,"sources":["webpack:///./src/demo/bootstrap.ts","webpack:///./src/components/angular2-modal/index.ts?5710","webpack:///./src/components/angular2-modal/angular2-modal.ts?88ad","webpack:///./src/components/angular2-modal/models/ICustomModal.ts?5079","webpack:///./src/components/angular2-modal/models/ModalConfig.ts?5ad5","webpack:///./src/components/angular2-modal/models/ModalDialogInstance.ts?41f6","webpack:///./src/components/angular2-modal/components/modalBackdrop.ts?4338","webpack:///./src/components/angular2-modal/components/bootstrapModalContainer.ts?9342","webpack:///./src/components/angular2-modal/providers/Modal.ts?38e1","webpack:///./src/components/angular2-modal/framework/ModalInstanceStack.ts?1cc0","webpack:///./src/components/angular2-modal/presets.ts?32e6","webpack:///./src/components/angular2-modal/presets/base/ModalAwarePreset.ts?f201","webpack:///./src/components/angular2-modal/framework/FluentAssign.ts?db05","webpack:///./src/components/angular2-modal/presets/base/MessageModalPreset.ts?2bb9","webpack:///./src/components/angular2-modal/modals/MessageModal.ts?82bc","webpack:///./src/components/angular2-modal/components/modalFooter.ts?6774","webpack:///./src/components/angular2-modal/framework/Utils.ts?e579","webpack:///./src/components/angular2-modal/presets/OneButtonPreset.ts?69c1","webpack:///./src/components/angular2-modal/presets/TwoButtonPreset.ts?29df","webpack:///./src/components/angular2-modal/commonModals/yesNoModal.ts?b5e5","webpack:///./src/components/angular2-modal/commonModals/okOnlyModal.ts?5b89","webpack:///./src/demo/app/app.ts","webpack:///./src/demo/app/demoPage/demoPage.ts","webpack:///./src/demo/app/customModalDemo/customModal.ts","webpack:///./src/demo/app/sampleElement/sampleElement.ts","webpack:///./src/demo/app/demoPage/presets.ts","webpack:///./src/demo/app/demoPage/demoPage.css","webpack:///./src/demo/app/demoPage/demoPage.tpl.html","webpack:///./src/demo/app/customizeWizard/customizeWizard.ts","webpack:///./src/demo/app/customizeWizard/customizeWizard.tpl.html"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["import {provide} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {ROUTER_PROVIDERS, LocationStrategy, HashLocationStrategy} from 'angular2/router';\nimport {ELEMENT_PROBE_PROVIDERS} from 'angular2/platform/common_dom';\n// include for production builds\n// import {enableProdMode} from 'angular2/core';\n\n// enableProdMode() // include for production builds\n\nimport {App} from './app/app';\nimport {ModalConfig} from 'angular2-modal';\n\nfunction main() {\n    return bootstrap(App, [\n        ROUTER_PROVIDERS,\n        provide(LocationStrategy, {useClass: HashLocationStrategy}),\n        // set a custom default options for the modal.\n        provide(ModalConfig, {useValue: new ModalConfig('lg', true, 81)}),\n        ELEMENT_PROBE_PROVIDERS // remove in production\n    ])\n        .catch(err => console.error(err));\n}\n\ndocument.addEventListener('DOMContentLoaded', main);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/demo/bootstrap.ts\n **/","// WEBPACK development runtime helper.\nexport * from './angular2-modal';\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/index.ts\n **/","export * from './models/ICustomModal';\nexport * from './models/ModalConfig';\nexport * from './models/ModalDialogInstance';\nexport * from './components/modalBackdrop';\nexport * from './components/bootstrapModalContainer';\nexport * from './components/modalFooter';\nexport * from './providers/Modal';\n\nexport * from './framework/FluentAssign';\nexport * from './modals/MessageModal';\nexport * from './presets';\n\nexport * from './commonModals/yesNoModal';\nexport * from './commonModals/okOnlyModal';\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/angular2-modal.ts\n **/","import {ModalDialogInstance} from '../models/ModalDialogInstance';\n\n/**\n * A Type used as a binding key for dialog window Components\n */\nexport class ICustomModal {}\n\nexport interface ICustomModalComponent {\n    dialog: ModalDialogInstance;\n\n    /**\n     * Invoked before a modal is dismissed, return true to cancel dismissal.\n     */\n    beforeDismiss?(): boolean;\n\n    /**\n     * Invoked before a modal is closed, return true to cancel closing.\n     */\n    beforeClose?(): boolean;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/models/ICustomModal.ts\n **/","import {Injectable} from 'angular2/core';\nlet _defaultConfig: ModalConfig;\n\nexport interface IModalConfig {\n    /**\n     * Size of the modal.\n     * 'lg' or 'sm' only.\n     * NOTE: No validation.\n     * Default to 'lg'\n     */\n    size: string;\n\n    /**\n     * Describes if the modal is blocking modal.\n     * A Blocking modal is not closable by clicking outside of the modal window.\n     * Defaults to false.\n     */\n    isBlocking: boolean;\n\n    /**\n     * Keyboard value/s that close the modal.\n     * Accepts either a single numeric value or an array of numeric values.\n     * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n     * Defaults to 27, set `null` implicitly to disable.\n     */\n    keyboard: Array<number> | number;\n}\n\n/**\n * A configuration definition object.\n * Instruction for how to show a modal.\n */\n@Injectable()\nexport class ModalConfig implements IModalConfig {\n    /**\n     * Size of the modal.\n     * 'lg' or 'sm' only.\n     * NOTE: No validation.\n     * Default to 'lg'\n     */\n    size: string;\n\n    /**\n     * Describes if the modal is blocking modal.\n     * A Blocking modal is not closable by clicking outside of the modal window.\n     * Defaults to false.\n     */\n    isBlocking: boolean;\n\n    /**\n     * Keyboard value/s that close the modal.\n     * Accepts either a single numeric value or an array of numeric values.\n     * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n     * Defaults to 27, set `null` implicitly to disable.\n     */\n    keyboard: Array<number> | number;\n\n\n    constructor(size: string = null, isBlocking: boolean = null,\n                keyboard: Array<number> | number = undefined) {\n        this.size = size;\n        this.isBlocking = isBlocking;\n        this.keyboard = keyboard;\n    }\n\n    /**\n     * Makes a ModalConfig instance valdud.\n     * @param config\n     * @param defaultConfig A Default config to use as master, optional.\n     * @returns {ModalConfig} The same config instance sent.\n     */\n    static makeValid(config: ModalConfig, defaultConfig?: ModalConfig) {\n        defaultConfig = (defaultConfig) ? defaultConfig : _defaultConfig;\n\n        if (!config.size)\n            config.size = defaultConfig.size;\n\n        if (config.isBlocking !== false)\n            config.isBlocking = true;\n\n        if (config.keyboard === null) {\n            config.keyboard = [];\n        } else if (typeof config.keyboard === 'number') {\n            config.keyboard = [<number>config.keyboard];\n        } else if (!Array.isArray(<Array<number>>config.keyboard)) {\n            config.keyboard = defaultConfig.keyboard;\n        }\n\n        return config;\n    }\n\n    /**\n     * Returns true if the config instance supports a given key.\n     * @param key\n     * @returns {boolean}\n     */\n    supportsKey(keyCode: number): boolean {\n        return (<Array<number>>this.keyboard).indexOf(keyCode) > -1;\n    }\n}\n\n_defaultConfig = new ModalConfig('lg', true, [27]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/models/ModalConfig.ts\n **/","import { ComponentRef } from 'angular2/core';\nimport {PromiseWrapper} from 'angular2/src/facade/async';\n\nimport {ModalConfig} from '../models/ModalConfig';\n\n/**\n * API to an open modal window.\n */\nexport class ModalDialogInstance {\n    contentRef: ComponentRef;\n    /**\n     * States if the modal is inside a specific element.\n     */\n    public inElement: boolean;\n\n    private _bootstrapRef: ComponentRef;\n    private _backdropRef: ComponentRef;\n    private _resultDefered: any;\n\n    constructor(public config: ModalConfig) {\n        this._resultDefered = PromiseWrapper.completer();\n    }\n\n    set backdropRef(value: ComponentRef) {\n        this._backdropRef = value;\n    }\n    set bootstrapRef(value: ComponentRef) {\n        this._bootstrapRef = value;\n    }\n\n    /**\n     * A Promise that is resolved on a close event and rejected on a dismiss event.\n     * @returns {Promise<T>|any|*|Promise<any>}\n     */\n    get result(): Promise<any> {\n        return this._resultDefered.promise;\n    }\n\n    /**\n     *  Close the modal with a return value, i.e: result.\n     */\n    close(result: any = null) {\n        if ( this.contentRef.instance.beforeClose &&\n                this.contentRef.instance.beforeClose() === true ) return;\n        this.dispose();\n        this._resultDefered.resolve(result);\n    }\n\n    /**\n     *  Close the modal without a return value, i.e: cancelled.\n     *  This call is automatically invoked when a user either:\n     *  - Presses an exit keyboard key (if configured).\n     *  - Clicks outside of the modal window (if configured).\n     *  Usually, dismiss represent a Cancel button or a X button.\n     */\n    dismiss() {\n        if ( this.contentRef.instance.beforeDismiss &&\n            this.contentRef.instance.beforeDismiss() === true ) return;\n        this.dispose();\n        this._resultDefered.reject();\n    }\n\n    private dispose() {\n        this._bootstrapRef.dispose();\n        this._backdropRef.dispose();\n        this.contentRef.dispose();\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/models/ModalDialogInstance.ts\n **/","import { Component } from 'angular2/core';\nimport {ModalDialogInstance} from '../models/ModalDialogInstance';\n\n\n/**\n * Represents the modal backdrop.\n */\n@Component({\n    selector: 'modal-backdrop',\n    host: {\n        '[style.position]': 'position',\n        '[style.height]': 'height',\n        '[style.width]': 'width',\n        '[style.top]': 'top',\n        '[style.left]': 'left',\n        '[style.right]': 'right',\n        '[style.bottom]': 'bottom'\n\n    },\n    template: '<div [style.position]=\"position\" class=\"in modal-backdrop\" #modalBackdrop></div>'\n})\nexport class ModalBackdrop {\n    public position: string;\n    public height: string;\n    public width: string;\n    public top: string;\n    public left: string;\n    public right: string;\n    public bottom: string;\n\n\n    constructor(dialog: ModalDialogInstance) {\n        if (!dialog.inElement) {\n            this.position = this.width = this.height = null;\n            this.top = this.left = this.right = this.bottom = null;\n        } else {\n            this.position = 'absolute';\n            this.height = '100%';\n            this.width = '100%';\n            this.top = this.left = this.right = this.bottom = '0';\n        }\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/components/modalBackdrop.ts\n **/","import { Component } from 'angular2/core';\nimport {ModalDialogInstance} from '../models/ModalDialogInstance';\nimport {Modal} from '../providers/Modal';\n\n/**\n * A component that acts as a top level container for an open modal window.\n */\n@Component({\n    selector: 'bootstrap-modal',\n    providers: [Modal],\n    host: {\n        'tabindex': '0',\n        'role': 'dialog',\n        'class': 'in modal',\n        'style': 'display: block',\n        '[style.position]': 'position',\n        '(body:keydown)': 'documentKeypress($event)',\n        '(click)': 'onClick()'\n    },\n    /* tslint:disable */\n    template:\n    `<div class=\"modal-dialog\"\n         [class.modal-lg]=\"dialogInstance.config.size == \\'lg\\'\"\n         [class.modal-sm]=\"dialogInstance.config.size == \\'sm\\'\">\n         <div class=\"modal-content\" (click)=\"onContainerClick($event)\" style=\"display: block\">\n            <div style=\"display: none\" #modalDialog></div>\n         </div>\n    </div>`\n    //TODO: #modalDialog element is not needed but dynamicComponentLoader doesn't seem to have behavior to inject a component the way we want.\n    //      We need to replace the #modalDialog element but the current implementation only adds it as a sibling.\n    //      see https://github.com/angular/angular/issues/6071\n    /* tslint:enable */\n})\nexport class BootstrapModalContainer {\n    dialogInstance: ModalDialogInstance;\n    public position: string;\n\n    constructor(dialogInstance: ModalDialogInstance, private modal: Modal) {\n        this.dialogInstance = dialogInstance;\n        if (!dialogInstance.inElement) {\n            this.position = null;\n        } else {\n            this.position = 'absolute';\n        }\n    }\n\n    onContainerClick($event: any) {\n        $event.stopPropagation();\n    }\n\n    onClick() {\n        return !this.dialogInstance.config.isBlocking && this.dialogInstance.dismiss();\n    }\n\n    documentKeypress(event: KeyboardEvent) {\n        // check that this modal is the last in the stack.\n        if (this.modal.stackPosition(this.dialogInstance) !== this.modal.stackLength - 1) return;\n\n        if (this.dialogInstance.config.supportsKey(event.keyCode)) {\n            this.dialogInstance.dismiss();\n        }\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/components/bootstrapModalContainer.ts\n **/","import {\n    Injectable,\n    DynamicComponentLoader,\n    ComponentRef,\n    ElementRef,\n    Injector,\n    provide,\n    ResolvedProvider,\n    Optional,\n    ApplicationRef\n} from 'angular2/core';\n\nimport {ModalInstanceStack} from '../framework/ModalInstanceStack';\nimport {ModalConfig} from '../models/ModalConfig';\nimport {ModalDialogInstance} from '../models/ModalDialogInstance';\nimport {ModalBackdrop} from '../components/modalBackdrop';\nimport {BootstrapModalContainer} from '../components/bootstrapModalContainer';\nimport {OneButtonPreset, TwoButtonPreset} from '../presets';\n\nconst _stack = new ModalInstanceStack();\n\n\n@Injectable()\nexport class Modal {\n    private config: ModalConfig;\n\n    constructor(private componentLoader: DynamicComponentLoader, private appRef: ApplicationRef,\n                @Optional() defaultConfig: ModalConfig) {\n        // The Modal class should be an application wide service (i.e: singleton).\n        // This will run once in most applications...\n        // If the user provides a ModalConfig instance to the DI,\n        // the custom config will be the default one.\n\n        Object.defineProperty(this, 'config', <any>{\n            configurable: false,\n            enumerable: true,\n            value: (defaultConfig) ? ModalConfig.makeValid(defaultConfig) : new ModalConfig(),\n            writable: false\n        });\n    }\n\n    alert(): OneButtonPreset {\n        return new OneButtonPreset(this, <any>{ isBlocking: false });\n    }\n\n    prompt(): OneButtonPreset {\n        return new OneButtonPreset(this, <any>{ isBlocking: true, keyboard: null });\n    }\n\n    confirm(): TwoButtonPreset {\n        return new TwoButtonPreset(this, <any>{ isBlocking: true, keyboard: null });\n    }\n\n    /**\n     * Opens a modal window blocking the whole screen.\n     * @param componentType The angular Component to render as modal.\n     * @param bindings Resolved providers that will inject into the component provided.\n     * @param config A Modal Configuration object.\n     * @returns {Promise<ModalDialogInstance>}\n     */\n    public open(componentType: FunctionConstructor, bindings: ResolvedProvider[],\n                config?: ModalConfig): Promise<ModalDialogInstance> {\n        // TODO: appRef.injector.get(APP_COMPONENT) Doesn't work.\n        // When it does replace with the hack below.\n        //let myElementRef = this.appRef.injector.get(APP_COMPONENT).location;\n        let elementRef: ElementRef = (<any>this.appRef)._rootComponents[0].location;\n\n        return this.openInside(componentType, elementRef, null, bindings, config);\n    }\n\n    /**\n     * Opens a modal window inside an existing component.\n     * @param componentType The angular Component to render as modal.\n     * @param elementRef The element to block using the modal.\n     * @param anchorName A template variable within the component.\n     * @param bindings Resolved providers that will inject into the component provided.\n     * @param config A Modal Configuration object.\n     * @returns {Promise<ModalDialogInstance>}\n     */\n    public openInside(componentType: FunctionConstructor, elementRef: ElementRef,\n                      anchorName: string, bindings: ResolvedProvider[],\n                      config?: ModalConfig): Promise<ModalDialogInstance> {\n\n        config = (config) ? ModalConfig.makeValid(config, this.config) : this.config;\n\n        let dialog = new ModalDialogInstance(config);\n        dialog.inElement = !!anchorName;\n\n        let dialogBindings = Injector.resolve([ provide(ModalDialogInstance, {useValue: dialog}) ]);\n        return this.createBackdrop(elementRef, dialogBindings, anchorName)\n            .then( (backdropRef: ComponentRef) => {\n                dialog.backdropRef = backdropRef;\n\n                let modalDataBindings = Injector.resolve(\n                    [provide(ModalDialogInstance, {useValue: dialog})]).concat(bindings);\n                return this.componentLoader.loadIntoLocation(\n                    BootstrapModalContainer, backdropRef.location, 'modalBackdrop', dialogBindings)\n                    .then(bootstrapRef => {\n                        dialog.bootstrapRef = bootstrapRef;\n                        return this.componentLoader.loadIntoLocation(\n                            componentType, bootstrapRef.location, 'modalDialog', modalDataBindings)\n                            .then(contentRef => {\n                                dialog.contentRef = contentRef;\n                                _stack.pushManaged(dialog);\n                                return dialog;\n                            });\n                        }\n                    );\n            });\n    }\n\n    stackPosition(mInstande: ModalDialogInstance) {\n        return _stack.indexOf(mInstande);\n    }\n\n    get stackLength(): number {\n        return _stack.length;\n    }\n\n    /**\n     * Creates backdrop element.\n     * @param {ElementRef} The element to block using the modal.\n     * @param {ResolvedProvider[]} Resolved providers,\n     *     must contain the ModalDialogInstance instance for this backdrop.\n     * @param {string} An anchor name, optional.\n     *     if not supplied backdrop gets applied next to elementRef, otherwise into it.\n     * @returns {Promise<ComponentRef>}\n     */\n    private createBackdrop(elementRef: ElementRef, bindings: ResolvedProvider[],\n                           anchorName?: string) : Promise<ComponentRef> {\n        return (!anchorName) ?\n            this.componentLoader.loadNextToLocation(ModalBackdrop, elementRef, bindings) :\n            this.componentLoader.loadIntoLocation(ModalBackdrop, elementRef, anchorName, bindings);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/providers/Modal.ts\n **/","import {ModalDialogInstance} from '../models/ModalDialogInstance';\nimport { DOM } from 'angular2/src/platform/dom/dom_adapter';\n\n/**\n * A dumb stack implementation over an array.\n */\nexport class ModalInstanceStack {\n    private _stack: ModalDialogInstance[] = [];\n\n\n    push(mInstance: ModalDialogInstance): void {\n        let idx = this._stack.indexOf(mInstance);\n        if (idx === -1) this._stack.push(mInstance);\n\n        /* TODO: this is wrong for several reasons:\n         1) This is a direct DOM access we need to find another way or to separate it.\n         2) It not the place for it.\n         3) It doesn't care if its a modal inside an element or a wide open one.\n         If its inside an element we need to add the 'modal-open' to that element.\n         If its wide open we add to the body, we need to traverse the stack every time\n         know what's going on and do it.\n         */\n        if (this._stack.length === 1) {\n            DOM.addClass(DOM.query('body'), 'modal-open');\n        }\n    }\n\n    /**\n     * Push a ModalDialogInstance into the stack and manage it so when it's done\n     * it will automatically kick itself out of the stack.\n     * @param mInstance\n     */\n    pushManaged(mInstance: ModalDialogInstance): void {\n        this.push(mInstance);\n        mInstance.result\n            .then(() => this.remove(mInstance))\n            .catch(() => this.remove(mInstance));\n        // we don't \"pop\" because we can't know for sure that our instance is the last.\n        // In a user event world it will be the last, but since modals can close programmatically\n        // we can't tell.\n    }\n\n    pop(): void {\n        this._stack.pop();\n    }\n\n    /**\n     * Remove a ModalDialogInstance from the stack.\n     * @param mInstance\n     */\n    remove(mInstance: ModalDialogInstance): void {\n        let idx = this._stack.indexOf(mInstance);\n        if (idx > -1) this._stack.splice(idx, 1);\n        if (this._stack.length === 0) {\n            DOM.removeClass(DOM.query('body'), 'modal-open');\n        }\n    }\n\n\n    index(index: number): ModalDialogInstance {\n        return this._stack[index];\n    }\n\n    indexOf(mInstance: ModalDialogInstance): number {\n        return this._stack.indexOf(mInstance);\n    }\n\n    get length(): number {\n        return this._stack.length;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/framework/ModalInstanceStack.ts\n **/","export * from './presets/base/ModalAwarePreset';\nexport * from './presets/base/MessageModalPreset';\nexport {OneButtonPreset, OneButtonPresetData} from './presets/OneButtonPreset'\nexport {TwoButtonPreset, TwoButtonPresetData} from './presets/TwoButtonPreset'\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/presets.ts\n **/","import { ResolvedProvider, ElementRef } from 'angular2/core';\nimport {Modal} from '../../providers/Modal';\nimport {IModalConfig, ModalConfig} from '../../models/ModalConfig';\nimport {FluentAssign, FluentAssignMethod, setAssignMethod} from './../../framework/FluentAssign';\nimport {ModalDialogInstance} from '../../models/ModalDialogInstance';\n\nexport interface ModalAwarePresetData extends IModalConfig {\n    component: any;\n    modal: Modal;\n    bindings: <T>(config: T) => ResolvedProvider[];\n}\n\n\n/**\n * A Preset that knows about the modal service, and so can open a modal window on demand.\n * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal\n * based on the preset.\n * ModalAwarePreset occupy the following properties:\n * - ModalConfig (size, isBlocking, keyboard): You can set them, if not they will get the \n * default values defined in the Modal service.  \n * - component, modal, bindings: Preset values needed to fire up the modal.\n * - open: A Method used to open the modal window.\n */\nexport class ModalAwarePreset<T extends ModalAwarePresetData> extends FluentAssign<T> {\n    constructor(defaultValues: T = undefined, initialSetters: string[] = undefined) {\n        super(defaultValues, initialSetters);\n        // this is not needed as we get them via defaults.\n        // but it \"protects\" overwrites since we set writeOnce=true.\n        setAssignMethod(this, 'modal', true);\n        setAssignMethod(this, 'component', true);\n        setAssignMethod(this, 'bindings', true);\n\n        setAssignMethod(this, 'size');\n        setAssignMethod(this, 'isBlocking');\n        setAssignMethod(this, 'keyboard');\n    }\n\n    size: FluentAssignMethod<string, this>;\n    isBlocking: FluentAssignMethod<boolean, this>;\n    keyboard: FluentAssignMethod<Array<number> | number, this>;\n\n    /**\n     * Open a modal window based on the configuration of this config instance.\n     * @param inside If set opens the modal inside the supplied elements ref at the specified anchor\n     * @returns Promise<ModalDialogInstance>\n     */\n    open(inside?: {elementRef: ElementRef, anchorName: string}): Promise<ModalDialogInstance> {\n        let config: T = this.toJSON();\n\n        if (! (config.modal instanceof Modal) ) {\n            return <any>Promise.reject(new Error('Configuration Error: modal service not set.'));\n        }\n\n        if (typeof config.bindings !== 'function') {\n            return <any>Promise.reject(new Error('Configuration Error: bindings not set.'));\n        }\n\n        if (inside) {\n            // TODO: Validate inside?\n            return config.modal.openInside(config.component,\n                inside.elementRef,\n                inside.anchorName,\n                config.bindings(config),\n                new ModalConfig(config.size, config.isBlocking, config.keyboard));\n        } else {\n            return config.modal.open(config.component,\n                config.bindings(config),\n                new ModalConfig(config.size, config.isBlocking, config.keyboard));\n        }\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/presets/base/ModalAwarePreset.ts\n **/","\nconst PRIVATE_PREFIX = '$$';\nconst RESERVED_REGEX = /^(\\$\\$).*/;\n\nfunction validateMethodName(name: string) {\n    if (!name) {\n        throw new Error(`Illegal method name. Empty method name is not allowed`);\n    } else if (name in this) {\n        throw new Error(`A member name '${name}' already defined.`);\n    }\n}\n\n/**\n * Returns a list of assigned property names (non private)\n * @param subject\n * @returns {string[]}\n */\nfunction getAssignedPropertyNames(subject: any): string[] {\n    return Object.getOwnPropertyNames(subject)\n        .filter(name => RESERVED_REGEX.test(name))\n        .map(name => name.substr(2));\n}\n\nfunction privateKey(name: string): string {\n    return PRIVATE_PREFIX + name;\n}\n\n/**\n * Create a function for setting a value for a property on a given object.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param writeOnce If true will allow writing once (default: false)\n */\nexport function setAssignMethod<T>(obj: T, propertyName: string, writeOnce: boolean = false): void {\n    validateMethodName.call(obj, propertyName);\n\n    Object.defineProperty(obj, propertyName, <any>{\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: function (value: any) {\n            let key = privateKey(propertyName);\n            if (writeOnce && this.hasOwnProperty(key)) {\n                throw new Error(`Overriding config property '${propertyName}' is not allowed.`);\n            }\n            this[key] = value;\n            return this;\n        }\n    });\n}\n\n\n/**\n * Describes a fluent assign method.\n * A function that gets a value and returns the instance it works on.\n */\nexport interface FluentAssignMethod<T, Z> {\n    //TODO: Setting 'this' instead of Z does not work, this=ConfigSetter here...\n    (value: T): Z;\n}\n\n\nexport interface IFluentAssignFactory<Z> {\n    fluentAssign: Z;\n    setMethod(name: string, defaultValue?: any): IFluentAssignFactory<Z>;\n}\n\n/**\n * Represent a fluent API factory wrapper for defining FluentAssign instances.\n */\nexport class FluentAssignFactory<T> {\n    private _fluentAssign: FluentAssign<T>;\n\n    constructor(fluentAssign?: FluentAssign<T>) {\n        this._fluentAssign =\n            fluentAssign instanceof FluentAssign ? fluentAssign : <any>new FluentAssign();\n    }\n\n    /**\n     * Create a setter method on the FluentAssign instance.\n     * @param name The name of the setter function.\n     * @param defaultValue If set (not undefined) set's the value on the instance immediately.\n     * @returns {FluentAssignFactory}\n     */\n    setMethod(name: string, defaultValue: any = undefined): FluentAssignFactory<T> {\n        setAssignMethod(this._fluentAssign, name);\n        if (defaultValue !== undefined) {\n            (<any>this._fluentAssign)[name](defaultValue);\n        }\n        return this;\n    }\n\n    /**\n     * The FluentAssign instance.\n     * @returns {FluentAssign<T>}\n     */\n    get fluentAssign(): FluentAssign<T> {\n        return this._fluentAssign;\n    }\n}\n\n/**\n * Represent an object where every property is a function representing an assignment function.\n * Calling each function with a value will assign the value to the object and return the object.\n * Calling 'toJSON' returns an object with the same properties but this time representing the\n * assigned values.\n *\n * This allows setting an object in a fluent API manner.\n * Example:\n let fluent = new FluentAssign<any>(undefined, ['some', 'went']);\n fluent.some('thing').went('wrong').toJSON();\n // { some: 'thing', went: 'wrong' }\n */\nexport class FluentAssign<T> {\n\n    /**\n     *\n     * @param defaultValues An object representing default values for the underlying object.\n     * @param initialSetters A list of initial setters for this FluentAssign.\n     */\n    constructor(defaultValues: T = undefined, initialSetters: string[] = undefined) {\n        if (defaultValues) {\n            Object.getOwnPropertyNames(defaultValues)\n                .forEach(name => (<any>this)[privateKey(name)] = (<any>defaultValues)[name]);\n        }\n\n        if (Array.isArray(initialSetters)) {\n            initialSetters.forEach(name => setAssignMethod(this, name));\n        }\n    }\n\n\n    /**\n     * Returns a FluentAssignFactory<FluentAssign<T>> ready to define a FluentAssign type.\n     * @param defaultValues An object representing default values for the instance.\n     * @param initialSetters A list of initial setters for the instance.\n     * @returns {FluentAssignFactory<T>}\n     */\n    static compose<T>(defaultValues: T = undefined,\n                      initialSetters: string[] = undefined): FluentAssignFactory<T> {\n\n        return <any>FluentAssign.composeWith<FluentAssign<T>>(\n            new FluentAssign<T>(defaultValues, initialSetters));\n    }\n\n    /**\n     * Returns a FluentAssignFactory<Z> where Z is an instance of FluentAssign<?> or a derived\n     * class of it.\n     * @param fluentAssign An instance of FluentAssign<?> or a derived class of FluentAssign<?>.\n     * @returns {any}\n     */\n    static composeWith<Z>(fluentAssign: Z): IFluentAssignFactory<Z> {\n        return <any>new FluentAssignFactory<any>(<any>fluentAssign);\n    }\n\n    toJSON(): T {\n        return getAssignedPropertyNames(this)\n            .reduce((obj: T, name: string) => {\n                (<any>obj)[name] = (<any>this)[privateKey(name)];\n                return obj;\n            }, <T><any>{});\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/framework/FluentAssign.ts\n **/","import {FluentAssignMethod} from '../../framework/FluentAssign';\nimport {ModalAwarePreset, ModalAwarePresetData} from './ModalAwarePreset';\nimport {MessageModal, MessageModalContext} from '../../modals/MessageModal';\nimport {extend, arrayUnion} from '../../framework/Utils';\n\n\nconst DEFAULT_CONFIG_VALUES = {\n    component: MessageModal,\n    headerClass: 'modal-header',\n    bodyClass: 'modal-body',\n    footerClass: 'modal-footer'\n};\n\nconst DEFAULT_INITIAL_SETTERS = [\n    'headerClass',\n    'title',\n    'titleHtml',\n    'body',\n    'bodyClass',\n    'footerClass'\n];\n\nexport interface MessageModalPresetData extends MessageModalContext, ModalAwarePresetData {}\n\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nexport abstract class MessageModalPreset<T extends MessageModalPresetData>\n                                                                    extends ModalAwarePreset<T> {\n\n    constructor(defaultValues: T = undefined, initialSetters: string[] = undefined) {\n        super(extend<any>(DEFAULT_CONFIG_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_INITIAL_SETTERS, initialSetters || []));\n    }\n\n    headerClass: FluentAssignMethod<string, this>;\n    title: FluentAssignMethod<string, this>;\n    titleHtml: FluentAssignMethod<string, this>;\n    body: FluentAssignMethod<string, this>;\n    bodyClass: FluentAssignMethod<string, this>;\n    footerClass: FluentAssignMethod<string, this>;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/presets/base/MessageModalPreset.ts\n **/","import {Component} from 'angular2/core';\n\nimport {ICustomModal, ICustomModalComponent} from '../models/ICustomModal';\nimport {ModalDialogInstance} from '../models/ModalDialogInstance';\nimport {ModalFooter, FooterButtonClickEvent} from '../components/modalFooter';\n\n/**\n * Interface for button definition\n */\nexport interface ModalButtonConfig {\n    cssClass: string;\n    caption: string;\n    onClick: (modalComponent: any, $event?: MouseEvent) => void;\n}\n\n/**\n * Data definition\n */\nexport class MessageModalContext implements ICustomModal {\n    /**\n     * A Class for the header (title) container.\n     * Default: modal-header\n     */\n    headerClass: string;\n\n    /**\n     * Caption for the title, enclosed in a H3 container.\n     */\n    title: string;\n\n    /**\n     * HTML for the title, if set overrides title property.\n     * The HTML is wrapped in a DIV element, inside the header container.\n     * Example:\n     <div class=\"modal-header\">\n        <div> HTML CONTENT INSERTED HERE </div>\n     </div>\n     * Note: HTML is not compiled.\n     */\n    titleHtml: string;\n\n    /**\n     * The body of the message.\n     * Can be either text or HTML.\n     * Note: HTML is not compiled.\n     */\n    body: string;\n    /**\n     * A Class for the body container.\n     * Default: modal-body\n     */\n    bodyClass: string;\n\n    /**\n     * A Class for the footer container.\n     * Default: modal-footer\n     */\n    footerClass: string;\n\n    buttons: ModalButtonConfig[];\n}\n\n/**\n * A Component representing a generic bootstrap modal content element.\n * \n * By configuring a MessageModalContext instance you can:\n * \n *  Header: \n *      - Set header container class (default: modal-header)\n *      - Set title text (enclosed in H3 element)\n *      - Set title html (overrides text)\n *      \n *  Body:\n *      - Set body container class.  (default: modal-body)\n *      - Set body container HTML.\n *      \n *  Footer:\n *      - Set footer class.  (default: modal-footer)\n *      - Set button configuration (from 0 to n)\n */\n@Component({\n    selector: 'modal-content',\n    directives: [ModalFooter],\n    template:\n    `<div [ngClass]=\"context.headerClass\" [ngSwitch]=\"titleHtml\">\n        <div *ngSwitchWhen=\"1\" [innerHtml]=\"context.titleHtml\"></div>\n        <h3 *ngSwitchDefault class=\"modal-title\">{{context.title}}</h3>\n    </div>\n    <div [ngClass]=\"context.bodyClass\" [innerHtml]=\"context.body\"></div>\n    <modal-footer [footerClass]=\"context.footerClass\" \n                  [buttons]=\"context.buttons\"\n                  (onButtonClick)=\"onFooterButtonClick($event)\"></modal-footer>`\n})\nexport class MessageModal implements ICustomModalComponent {\n    constructor(public dialog: ModalDialogInstance, public context: MessageModalContext) {}\n\n    onFooterButtonClick($event: FooterButtonClickEvent) {\n        $event.btn.onClick(this, $event.$event);\n    }\n\n    get titleHtml(): number {\n        return this.context.titleHtml ? 1 : 0;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/modals/MessageModal.ts\n **/","import { Component, Input, Output, EventEmitter } from 'angular2/core';\nimport {ModalButtonConfig} from '../modals/MessageModal';\n\nexport interface FooterButtonClickEvent {\n    btn: ModalButtonConfig;\n    $event: MouseEvent;\n}\n\n/**\n * Represents the modal footer for storing buttons.\n */\n@Component({\n    selector: 'modal-footer',\n    template:\n`<div [ngClass]=\"footerClass\">\n    <button *ngFor=\"#btn of buttons;\"\n            [ngClass]=\"btn.cssClass\"\n            (click)=\"onClick(btn, $event)\">{{btn.caption}}</button>\n</div>`\n})\nexport class ModalFooter {\n    /**\n     * Class name used for the footer container.\n     */\n    @Input() public footerClass: string;\n\n    /**\n     * A collection of button configurations, each configuration is a button to display.\n     */\n    @Input() public buttons: ModalButtonConfig[];\n\n    /**\n     * Emitted when a button was clicked \n     * @type {EventEmitter<FooterButtonClickEvent>}\n     */\n    @Output() public onButtonClick = new EventEmitter<FooterButtonClickEvent>();\n\n    constructor() {}\n\n    onClick(btn: any, $event: MouseEvent) {\n        this.onButtonClick.emit({btn, $event});\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/components/modalFooter.ts\n **/","/**\n * Simple object extend\n * @param m1\n * @param m2\n * @returns {{}}\n */\nexport function extend<T>(m1: any, m2: any): T {\n    var m: T = <T>{};\n    for (var attr in m1) {\n        if (m1.hasOwnProperty(attr)) {\n            (<any>m)[attr] = (<any>m1)[attr];\n        }\n    }\n\n    for (var attr in m2) {\n        if (m2.hasOwnProperty(attr)) {\n            (<any>m)[attr] = (<any>m2)[attr];\n        }\n    }\n\n    return m;\n}\n\n/**\n * Simple, not optimized, array union of unique values.\n * @param arr1\n * @param arr2\n * @returns {T[]|any[]|any[][]|any[]}\n */\nexport function arrayUnion<T>(arr1: any[], arr2: any[]): T[] {\n    return arr1\n        .concat(arr2.filter(v => arr1.indexOf(v) === -1));\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/framework/Utils.ts\n **/","import { Injector, provide , ResolvedBinding} from 'angular2/core';\nimport {FluentAssignMethod} from '../framework/FluentAssign';\nimport {Modal} from '../providers/Modal';\nimport {MessageModalContext, MessageModal} from '../modals/MessageModal';\nimport {MessageModalPreset, MessageModalPresetData} from './base/MessageModalPreset';\nimport {extend} from '../framework/Utils';\n\n\nfunction createBindings(config: OneButtonPresetData): ResolvedBinding[] {\n    config.buttons = [\n        {\n            cssClass: config.okBtnClass,\n            caption: config.okBtn,\n            onClick: (modalComponent: MessageModal, $event?: MouseEvent) =>\n                modalComponent.dialog.close(true)\n        }\n    ];\n\n    return Injector.resolve([\n        provide(MessageModalContext, {useValue: config})\n    ]);\n}\n\nexport interface OneButtonPresetData extends MessageModalPresetData {\n    /** \n     * Caption for the OK button.\n     * Default: OK\n     */\n    okBtn: string;\n\n    /**\n     * A Class for the OK button.\n     * Default: btn btn-primary\n     */\n    okBtnClass: string;\n}\n\n/**\n * A Preset for a classic 1 button modal window.\n */\nexport class OneButtonPreset extends MessageModalPreset<OneButtonPresetData> {\n    constructor(modal: Modal, defaultValues: OneButtonPresetData = undefined) {\n        super(extend<any>( {\n            modal: modal,\n            bindings: createBindings,\n            okBtn: 'OK',\n            okBtnClass: 'btn btn-primary'\n        }, defaultValues || {}), [\n            'okBtn',\n            'okBtnClass'\n        ]);\n    }\n\n    okBtn: FluentAssignMethod<string, this>;\n    okBtnClass: FluentAssignMethod<string, this>;\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/presets/OneButtonPreset.ts\n **/","import { Injector, provide , ResolvedBinding} from 'angular2/core';\nimport {FluentAssignMethod} from '../framework/FluentAssign';\nimport {extend} from '../framework/Utils';\nimport {Modal} from '../providers/Modal';\nimport {MessageModalContext, MessageModal} from '../modals/MessageModal';\nimport {MessageModalPreset} from './base/MessageModalPreset';\nimport {OneButtonPresetData} from './OneButtonPreset';\n\n\nfunction createBindings(config: TwoButtonPresetData): ResolvedBinding[] {\n    config.buttons = [\n        {\n            cssClass: config.okBtnClass,\n            caption: config.okBtn,\n            onClick: (modalComponent: MessageModal, $event: MouseEvent) =>\n                modalComponent.dialog.close(true)\n        },\n        {\n            cssClass: config.cancelBtnClass,\n            caption: config.cancelBtn,\n            onClick: (modalComponent: MessageModal, $event: MouseEvent) =>\n                modalComponent.dialog.dismiss()\n        }\n    ];\n\n    return Injector.resolve([\n        provide(MessageModalContext, {useValue: config})\n    ]);\n}\n\nexport interface TwoButtonPresetData extends OneButtonPresetData {\n    /** \n     * Caption for the Cancel button.\n     * Default: Cancel\n     */\n    cancelBtn: string;\n\n    /**\n     * A Class for the Cancel button.\n     * Default: btn btn-default\n     */\n    cancelBtnClass: string;\n}\n\n/**\n * A Preset for a classic 2 button modal window.\n */\nexport class TwoButtonPreset extends MessageModalPreset<TwoButtonPresetData> {\n    constructor(modal: Modal, defaultValues: TwoButtonPresetData = undefined) {\n        super(extend<any>( {\n            modal: modal,\n            bindings: createBindings,\n            okBtn: 'OK',\n            okBtnClass: 'btn btn-primary',\n            cancelBtn: 'Cancel',\n            cancelBtnClass: 'btn btn-default'\n        }, defaultValues || {}), [\n            'okBtn',\n            'okBtnClass',\n            'cancelBtn',\n            'cancelBtnClass'\n        ]);\n    }\n\n    okBtn: FluentAssignMethod<string, this>;\n    okBtnClass: FluentAssignMethod<string, this>;\n    cancelBtn: FluentAssignMethod<string, this>;\n    cancelBtnClass: FluentAssignMethod<string, this>;\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/presets/TwoButtonPreset.ts\n **/","import {Component, provide, ElementRef, Injector} from 'angular2/core';\nimport {NgIf} from 'angular2/common';\n\n\nimport {ICustomModal, ICustomModalComponent} from '../models/ICustomModal';\nimport {ModalDialogInstance} from '../models/ModalDialogInstance';\n\n/**\n * Data definition\n */\nexport class YesNoModalContent {\n    constructor(\n        public title: string = 'Hello World Title',\n        public body: string = 'Hello World Body!',\n        public hideNo: boolean = false,\n        public yesText: string = 'YES',\n        public noText: string = 'NO'\n    ) {}\n}\n\n/**\n * A 2 state bootstrap modal window, representing 2 possible answer, true/false.\n */\n@Component({\n    selector: 'modal-content',\n    directives: [ NgIf ],\n    /* tslint:disable */ template:\n    `<div class=\"modal-header\">\n        <h3 class=\"modal-title\">{{context.title}}</h3>\n        </div>\n        <div class=\"modal-body\">{{context.body}}</div>\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-primary\" (click)=\"ok($event)\">{{context.yesText}}</button>\n            <button *ngIf=\"!context.hideNo\" class=\"btn btn-warning\" (click)=\"cancel()\">{{context.noText}}</button>\n        </div>`\n})\nexport class YesNoModal implements ICustomModalComponent {\n    dialog: ModalDialogInstance;\n    context: YesNoModalContent;\n\n    constructor(dialog: ModalDialogInstance, modelContentData: ICustomModal) {\n        this.dialog = dialog;\n        this.context = <YesNoModalContent>modelContentData;\n    }\n\n    ok($event: any) {\n        $event.stopPropagation();\n        this.dialog.close(true);\n    }\n\n    cancel() {\n        this.dialog.dismiss();\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/commonModals/yesNoModal.ts\n **/","import {Component, provide, ElementRef, Injector} from 'angular2/core';\n\nimport {ICustomModal, ICustomModalComponent} from '../models/ICustomModal';\nimport {ModalDialogInstance} from '../models/ModalDialogInstance';\n\n/**\n * Data definition\n */\nexport class OKOnlyContent {\n    constructor(\n        public title: string = 'Hello World Title',\n        public body: string = 'Hello World Body!',\n        public okText: string = 'OK'\n    ) {}\n}\n\n/**\n * A 2 state bootstrap modal window, representing 2 possible answer, true/false.\n */\n@Component({\n    selector: 'modal-content',\n    template:\n    `<div class=\"modal-header\">\n        <h3 class=\"modal-title\">{{context.title}}</h3>\n        </div>\n        <div class=\"modal-body\">{{context.body}}</div>\n        <div class=\"modal-footer\">\n            <button class=\"btn btn-primary\" (click)=\"ok()\">{{context.okText}}</button>\n        </div>`\n})\nexport class OKOnlyModal implements ICustomModalComponent {\n    dialog: ModalDialogInstance;\n    context: OKOnlyContent;\n\n    constructor(dialog: ModalDialogInstance, modelContentData: ICustomModal) {\n        this.dialog = dialog;\n        this.context = <OKOnlyContent>modelContentData;\n    }\n\n    ok() {\n        this.dialog.close(true);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/components/angular2-modal/commonModals/okOnlyModal.ts\n **/","import {Component} from 'angular2/core';\nimport {RouteConfig, ROUTER_DIRECTIVES} from 'angular2/router';\nimport {FORM_PROVIDERS} from 'angular2/common';\n\nimport {DemoPage} from './demoPage/demoPage';\nimport {CustomizeWizard} from './customizeWizard/customizeWizard';\n/*\n * App Component\n * Top Level Component\n */\n@Component({\n    selector: 'app', // <app></app>\n    // We need to tell Angular's Dependency Injection which providers are in our app.\n    providers: [ ...FORM_PROVIDERS],\n    // We need to tell Angular's compiler which directives are in our template.\n    // Doing so will allow Angular to attach our behavior to an element\n    directives: [ ...ROUTER_DIRECTIVES],\n    // We need to tell Angular's compiler which custom pipes are in our template.\n    pipes: [],\n    // Our list of styles in our component. We may add more to compose many styles together\n    styles: [ ],\n    // Every Angular template is first compiled by the browser before Angular runs it's compiler\n    template: `\n    <main>\n      <router-outlet></router-outlet>\n    </main>\n  `\n})\n@RouteConfig([\n    { path: '/', component: DemoPage, name: 'Demo' },\n    { path: '/customizeModals', component: CustomizeWizard, name: 'CustomizeModals' }\n])\nexport class App {\n    constructor() {}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/demo/app/app.ts\n **/","import { Component, provide, ElementRef, Injector} from 'angular2/core';\nimport {RouterLink} from 'angular2/router';\nimport {ModalConfig, Modal, ICustomModal, ModalDialogInstance} from 'angular2-modal';\nimport {AdditionCalculateWindowData, AdditionCalculateWindow} from '../customModalDemo/customModal';\nimport {SampleElement} from '../sampleElement/sampleElement';\nimport * as presets from './presets';\n\nconst BUTTONS = [\n    {\n        text: 'Alert',\n        preset: presets.alert\n    },\n    {\n        text: 'Prompt',\n        preset: presets.prompt\n    },\n    {\n        text: 'Confirm',\n        preset: presets.confirm\n    },\n    {\n        text: 'Cascading',\n        preset: presets.cascading\n    },\n    {\n        text: 'In Element',\n        preset: presets.inElement\n    }\n];\n\n@Component({\n    selector: 'demo-page',\n    directives: [SampleElement, RouterLink],\n    providers: [Modal],\n    styles: [ require('./demoPage.css') ],\n    template: require('./demoPage.tpl.html')\n})\nexport class DemoPage {\n    public mySampleElement: ElementRef;\n    public lastModalResult: string;\n    public buttons = BUTTONS;\n    constructor(private modal: Modal) {}\n\n    processDialog(dialog: Promise<ModalDialogInstance>) {\n        dialog.then((resultPromise) => {\n            return resultPromise.result.then((result) => {\n                this.lastModalResult = result;\n            }, () => this.lastModalResult = 'Rejected!');\n        });\n    }\n    open(btn) {\n        let dialog,\n            preset = btn.preset(this.modal);\n        if (btn.text === 'In Element') {\n            dialog = preset.open({\n                elementRef: this.mySampleElement,\n                anchorName: 'myModal'\n            });\n        } else {\n            dialog = preset.open();\n        }\n\n        this.processDialog(dialog);\n    }\n\n\n    openCustomModal() {\n        let resolvedBindings = Injector.resolve([provide(ICustomModal, {\n                                                useValue: new AdditionCalculateWindowData(2, 3)})]),\n            dialog = this.modal.open(\n                <any>AdditionCalculateWindow,\n                resolvedBindings,\n                new ModalConfig('lg', true, 27)\n        );\n       this.processDialog(dialog);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/demo/app/demoPage/demoPage.ts\n **/","import {Component, Input} from 'angular2/core';\nimport {CORE_DIRECTIVES} from 'angular2/common';\n\nimport {Modal, ModalDialogInstance, ICustomModal, ICustomModalComponent} from 'angular2-modal';\n\nexport class AdditionCalculateWindowData {\n    constructor(\n        public num1: number,\n        public num2: number\n    ) {}\n}\n\n/**\n * A Sample of how simple it is to create a new window, with its own injects.\n */\n@Component({\n    selector: 'modal-content',\n    directives: [CORE_DIRECTIVES],\n    styles: [`\n        .custom-modal-container {\n            padding: 15px;\n        }\n\n        .custom-modal-header {\n            background-color: #219161;\n            color: #fff;\n            -webkit-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.75);\n            -moz-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.75);\n            box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.75);\n            margin-top: -15px;\n            margin-bottom: 40px;\n        }\n    `],\n    //TODO: [ngClass] here on purpose, no real use, just to show how to workaround ng2 issue #4330.\n    // Remove when solved.\n    /* tslint:disable */ template: `\n        <div class=\"container-fluid custom-modal-container\">\n            <div class=\"row custom-modal-header\">\n                <div class=\"col-sm-12\">\n                    <h1>A Custom modal design</h1>\n                </div>\n            </div>\n            <div class=\"row\" [ngClass]=\"{'myclass' : shouldUseMyClass}\">\n                <div class=\"col-xs-12\">\n                    <div class=\"jumbotron\">\n                        <h1>Do the math to quit:</h1>\n                        <p class=\"lead\">I received an injection of the number <strong>{{context.num1}}</strong> and the number <strong>{{context.num2}}</strong></p>\n                        <span>What is the sum?</span>\n                         <input class=\"form-control\" type=\"text\" #answer (keyup)=\"onKeyUp(answer.value)\" autofocus>\n                    </div>\n                </div>\n            </div>\n        </div>`\n})\nexport class AdditionCalculateWindow implements ICustomModalComponent {\n    dialog: ModalDialogInstance;\n    context: AdditionCalculateWindowData;\n\n    public wrongAnswer: boolean;\n\n    constructor(dialog: ModalDialogInstance, modelContentData: ICustomModal) {\n        this.dialog = dialog;\n        this.context = <AdditionCalculateWindowData>modelContentData;\n        this.wrongAnswer = true;\n    }\n\n    onKeyUp(value) {\n        /* tslint:disable */ this.wrongAnswer = value != 5;\n        this.dialog.close();\n    }\n\n\n    beforeDismiss(): boolean {\n        return true;\n    }\n\n    beforeClose(): boolean {\n        return this.wrongAnswer;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/demo/app/customModalDemo/customModal.ts\n **/","import {Component, ElementRef, Inject, forwardRef} from 'angular2/core';\nimport {DemoPage} from '../demoPage/demoPage';\n\n@Component({\n    selector: 'sample-element',\n    template:\n    `<div>\n        <h1>I Am an Element!</h1>\n        <p>I can be modaled!</p>\n     </div>\n     <div #myModal></div>\n     `\n})\nexport class SampleElement {\n    constructor( @Inject(forwardRef(() => DemoPage)) demoPage: DemoPage, elementRef: ElementRef) {\n        //TODO: Replace with querying instead of letting the DI decide?\n        demoPage.mySampleElement = elementRef;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/demo/app/sampleElement/sampleElement.ts\n **/","import {Modal} from 'angular2-modal';\n\nexport function alert(modal: Modal) {\n    return modal.alert()\n        .size('lg')\n        .title('A simple Alert style modal window')\n        .body(`\n        <h4>Alert is a classic (title/body/footer) 1 button modal window that \n        does not block.</h4>\n        <b>Configuration:</b>\n        <ul>\n            <li>Non blocking (click anywhere outside to dismiss)</li>\n            <li>Size large</li>\n            <li>Dismissed with default keyboard key (ESC)</li>\n            <li>Close wth button click</li>\n            <li>HTML content</li>\n        </ul>`);\n}\n\nexport function prompt(modal: Modal) {\n    return modal.prompt()\n        .size('lg')\n        .title('A simple Prompt style modal window')\n        .body(`\n            <h4>Prompt is a classic (title/body/footer) 1 button modal window that \n            blocks.</h4>\n            <b>Configuration:</b>\n            <ul>\n                <li>Blocks (only button click can dismiss)</li>\n                <li>Size large</li>\n                <li>Keyboard can not dismiss</li>\n                <li>HTML content</li>\n            </ul>`);\n}\n\nexport function confirm(modal: Modal) {\n    return modal.confirm()\n        .size('lg')\n        .titleHtml(`\n            <div class=\"modal-title\" \n                 style=\"font-size: 22px; color: grey; text-decoration: underline;\">\n                 A simple Confirm style modal window</div>`)\n        .body(`\n            <h4>Confirm is a classic (title/body/footer) 2 button modal window that blocks.</h4>\n            <b>Configuration:</b>\n            <ul>\n                <li>Blocks (only button click can close/dismiss)</li>\n                <li>Size large</li>\n                <li>Keyboard can not dismiss</li>\n                <li>HTML Title</li>\n                <li>HTML content</li>\n            </ul>`);\n}\n\nexport function cascading(modal: Modal) {\n    let presets = [];\n\n    presets.push(alert(modal));\n    presets.push(prompt(modal));\n    presets.push(confirm(modal));\n    presets.push(\n        modal.prompt()\n            .size('sm')\n            .title('Cascading modals!')\n            .body('Find your way out...')\n    );\n\n    return {\n        open: () => {\n            let ret = presets.shift().open();\n            while (presets.length > 0) presets.shift().open();\n            return ret;\n        }\n    };\n}\n\nexport function inElement(modal: Modal) {\n    return modal.prompt()\n        .size('sm')\n        .title('A modal contained by an element')\n        .body('Try stacking up more modals!');\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/demo/app/demoPage/presets.ts\n **/","module.exports = \".simple-element {\\n    position: relative;\\n    display:block;\\n    background-color: #219161\\n}\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/demo/app/demoPage/demoPage.css\n ** module id = 281\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"container\\\">\\n    <h1>Angular 2 (beta) Bootstrap Modal/Dialog</h1>\\n    <p class=\\\"lead\\\">Blog post will be up soon! look for it in my <a href=\\\"http://blog.assaf.co/\\\" target=\\\"_blank\\\">blog</a>.</p>\\n    <br>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-xs-12\\\">\\n            <button *ngFor=\\\"#btn of buttons;\\\"\\n                    class=\\\"btn btn-default\\\"\\n                    (click)=\\\"open(btn)\\\">{{btn.text}}</button>\\n            <button class=\\\"btn btn-default\\\" (click)=\\\"openCustomModal()\\\">Custom Modal</button>\\n            <a [routerLink]=\\\"['CustomizeModals']\\\">Or use the modal code Generator!</a>\\n        </div>\\n    </div>\\n    <br><br><br><br>\\n    <sample-element class=\\\"jumbotron simple-element\\\"></sample-element>\\n    <br><br>\\n    <h2>Last modal result: {{lastModalResult}}</h2>\\n</div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/demo/app/demoPage/demoPage.tpl.html\n ** module id = 282\n ** module chunks = 1\n **/","import { Component } from 'angular2/core';\nimport {Modal, TwoButtonPresetData, TwoButtonPreset} from 'angular2-modal';\nlet html = require('./customizeWizard.tpl.html');\n\n\n@Component({\n    selector: 'customize-wizard',\n    directives: [],\n    providers: [Modal],\n    template: html\n})\nexport class CustomizeWizard {\n    type: 'alert' | 'prompt' | 'confirm' = 'alert';\n    public preset: TwoButtonPresetData = <any>{\n        size: 'lg',\n        isBlocking: true,\n        keyboard: 27,\n        headerClass: '',\n        title: 'Hello World',\n        titleHtml: '',\n        body: 'A Customized Modal',\n        bodyClass: '',\n        footerClass: '',\n        okBtn: '',\n        okBtnClass: '',\n    };\n\n    constructor(private modal: Modal) {}\n\n    createModal() {\n        let p = this.preset;\n\n        let fluent: TwoButtonPreset = <any>this.modal[this.type]();\n        for (let key in p) {\n            let value = p[key];\n            if (value === null || value === '') continue;\n            fluent[key](value);\n        }\n\n        fluent.open();\n    }\n\n    get code(): string {\n        let p = this.preset,\n            code = `modal.${this.type}()\\n`;\n\n        for (let key in p) {\n            let value = p[key];\n            if (value === null || value === '') continue;\n            code += `    .${key}(${typeof value === 'string' ? `'${value}'` : value})\\n`;\n    }\n\n        code += '    .open();';\n        return code;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./src/demo/app/customizeWizard/customizeWizard.ts\n **/","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <h1>Customize A modal window</h1>\\n    <p class=\\\"lead\\\">Configure a modal, see the code and view the output!</p>\\n    <hr>\\n    <div class=\\\"col-md-6\\\">\\n        <div class=\\\"col-xs-6\\\">\\n            <h3>Configuration:</h3>\\n        </div>\\n        <div class=\\\"col-xs-6 col-md-4\\\">\\n            <button class=\\\"btn btn-success pull-right\\\" (click)=\\\"createModal()\\\">Open Modal</button>\\n        </div>\\n        <div class=\\\"col-xs-12\\\">\\n            <form class=\\\"form-horizontal\\\" #form=\\\"ngForm\\\" (ngSubmit)=\\\"logForm(form.value)\\\">\\n                <fieldset>\\n\\n                    <!-- Select Basic -->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"modalType\\\">Type</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <select id=\\\"modalType\\\" name=\\\"modalType\\\" class=\\\"form-control\\\"\\n                                    [(ngModel)]=\\\"type\\\">\\n                                <option value=\\\"alert\\\">Alert</option>\\n                                <option value=\\\"prompt\\\">Prompt</option>\\n                                <option value=\\\"confirm\\\">Confirm</option>\\n                            </select>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"modalSize\\\">Modal Size</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <select id=\\\"modalSize\\\" name=\\\"modalSize\\\" class=\\\"form-control\\\"\\n                                    [(ngModel)]=\\\"preset.size\\\">\\n                                <option value=\\\"sm\\\">Small</option>\\n                                <option value=\\\"lg\\\">Large</option>\\n                            </select>\\n                        </div>\\n                    </div>\\n\\n\\n                    <!-- Multiple Checkboxes (inline) -->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"checkbox\\\">Blocking?</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input type=\\\"checkbox\\\" name=\\\"checkbox\\\" id=\\\"checkbox\\\"\\n                                   [(ngModel)]=\\\"preset.isBlocking\\\">\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"closeKeys\\\">Close Key</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"closeKeys\\\" name=\\\"closeKeys\\\" type=\\\"number\\\" placeholder=\\\"27\\\"\\n                                   class=\\\"form-control input-md\\\" [(ngModel)]=\\\"preset.keyboard\\\">\\n                            <span class=\\\"help-block\\\">Key code for closing the window (e.g: 27 for ESC)</span>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"headerClass\\\">Header Class</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"headerClass\\\" name=\\\"headerClass\\\" type=\\\"text\\\"\\n                                   placeholder=\\\"modal-header\\\" class=\\\"form-control input-md\\\"\\n                                   [(ngModel)]=\\\"preset.headerClass\\\">\\n                            <span class=\\\"help-block\\\"> A Class for the header (title) container.  Default: modal-header</span>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"title\\\">Title</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" placeholder=\\\"This is a title\\\"\\n                                   class=\\\"form-control input-md\\\" [(ngModel)]=\\\"preset.title\\\">\\n                            <span class=\\\"help-block\\\">Caption for the title, enclosed in a H3 container.</span>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Textarea -->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"titleHtml\\\">Title (HTML)</label>\\n                        <div class=\\\"col-md-6\\\">\\n                        <textarea class=\\\"form-control\\\" id=\\\"titleHtml\\\" name=\\\"titleHtml\\\"\\n                                  [(ngModel)]=\\\"preset.titleHtml\\\"></textarea>\\n                        </div>\\n                        <p class=\\\"help-block\\\">An HTML (not compiled) body, if set Title is ignored.</p>\\n                    </div>\\n\\n                    <!-- Textarea -->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"body\\\">Body</label>\\n                        <div class=\\\"col-md-4\\\">\\n                        <textarea class=\\\"form-control\\\" id=\\\"body\\\" name=\\\"body\\\"\\n                                  [(ngModel)]=\\\"preset.body\\\"></textarea>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"bodyClass\\\">Body Class</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"bodyClass\\\" name=\\\"bodyClass\\\" type=\\\"text\\\" placeholder=\\\"modal-body\\\"\\n                                   class=\\\"form-control input-md\\\" [(ngModel)]=\\\"preset.bodyClass\\\">\\n                            <span class=\\\"help-block\\\">A Class for the body container. Default: modal-body</span>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"footerClass\\\">Footer Class</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"footerClass\\\" name=\\\"footerClass\\\" type=\\\"text\\\"\\n                                   placeholder=\\\"modal-footer\\\" class=\\\"form-control input-md\\\"\\n                                   [(ngModel)]=\\\"preset.footerClass\\\">\\n                            <span class=\\\"help-block\\\">A Class for the footer container. Default: modal-footer</span>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"okBtn\\\">OK Button Text</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"okBtn\\\" name=\\\"okBtn\\\" type=\\\"text\\\" placeholder=\\\"OK\\\"\\n                                   class=\\\"form-control input-md\\\"\\n                                   [(ngModel)]=\\\"preset.okBtn\\\">\\n                            <span class=\\\"help-block\\\">Caption for the OK button. Default: OK</span>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"okBtnClass\\\">OK Button Class</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"okBtnClass\\\" name=\\\"okBtnClass\\\" type=\\\"text\\\"\\n                                   placeholder=\\\"btn btn-primary\\\" class=\\\"form-control input-md\\\"\\n                                   [(ngModel)]=\\\"preset.okBtnClass\\\">\\n                            <span class=\\\"help-block\\\">A Class for the OK button. Default: btn btn-primary</span>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\" *ngIf=\\\"type === 'confirm'\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"cancelBtn\\\">Cancel Button Text</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"cancelBtn\\\" name=\\\"cancelBtn\\\" type=\\\"text\\\" placeholder=\\\"Cancel\\\"\\n                                   class=\\\"form-control input-md\\\" [(ngModel)]=\\\"preset.cancelBtn\\\">\\n                            <span class=\\\"help-block\\\">Caption for the Cancel button. Default: Cancel</span>\\n                        </div>\\n                    </div>\\n\\n                    <!-- Text input-->\\n                    <div class=\\\"form-group\\\" *ngIf=\\\"type === 'confirm'\\\">\\n                        <label class=\\\"col-md-4 control-label\\\" for=\\\"cancelBtnClass\\\">Cancel Button Class</label>\\n                        <div class=\\\"col-md-6\\\">\\n                            <input id=\\\"cancelBtnClass\\\" name=\\\"cancelBtnClass\\\" type=\\\"text\\\"\\n                                   placeholder=\\\"btn btn-default\\\" class=\\\"form-control input-md\\\"\\n                                   [(ngModel)]=\\\"preset.cancelBtnClass\\\">\\n                            <span class=\\\"help-block\\\">A Class for the Cancel button. Default: btn btn-default</span>\\n                        </div>\\n                    </div>\\n\\n                </fieldset>\\n            </form>\\n        </div>\\n    </div>\\n    <div class=\\\"col-md-6\\\">\\n        <h3>Code:</h3>\\n        <pre>{{code}}</pre>\\n    </div>\\n</div>\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/demo/app/customizeWizard/customizeWizard.tpl.html\n ** module id = 284\n ** module chunks = 1\n **/"],"sourceRoot":""}